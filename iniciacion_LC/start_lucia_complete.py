#!/usr/bin/env python3
"""
Inicio Completo de LucIA v0.6.0
Script que instala dependencias, ejecuta tests y inicia el sistema completo
"""

import asyncio
import sys
import os
import subprocess
import importlib
from datetime import datetime

def install_dependencies():
    """Instala dependencias autom√°ticamente"""
    print("=" * 80)
    print("üîß INSTALACI√ìN AUTOM√ÅTICA DE DEPENDENCIAS")
    print("=" * 80)
    
    # Lista de dependencias necesarias
    dependencies = [
        "numpy", "pandas", "scikit-learn", "matplotlib", "seaborn",
        "requests", "aiohttp", "sqlalchemy", "cryptography", "PyJWT",
        "Pillow", "psutil", "python-dotenv", "pydantic", "click",
        "rich", "tqdm", "schedule", "pytest", "pytest-asyncio"
    ]
    
    installed = 0
    failed = 0
    
    for dep in dependencies:
        try:
            # Verificar si ya est√° instalado
            importlib.import_module(dep)
            print(f"‚úÖ {dep} - Ya instalado")
            installed += 1
        except ImportError:
            print(f"üì¶ Instalando {dep}...")
            try:
                subprocess.check_call([
                    sys.executable, "-m", "pip", "install", dep, "--quiet"
                ])
                print(f"‚úÖ {dep} - Instalado")
                installed += 1
            except subprocess.CalledProcessError:
                print(f"‚ùå {dep} - Error en instalaci√≥n")
                failed += 1
    
    print(f"\nüìä Resumen: {installed} instalados, {failed} fallidos")
    return failed == 0

async def run_tests():
    """Ejecuta tests autom√°ticos"""
    print("\n" + "=" * 80)
    print("üß™ EJECUTANDO TESTS AUTOM√ÅTICOS")
    print("=" * 80)
    
    try:
        from test_LC.auto_tests import run_auto_tests
        report = await run_auto_tests()
        
        if report:
            success_rate = report.get('success_rate', 0)
            status = report.get('status', 'UNKNOWN')
            
            print(f"\nüìä Resultados de Tests:")
            print(f"   Tasa de √©xito: {success_rate:.1f}%")
            print(f"   Estado: {status}")
            
            if status == "READY":
                print("‚úÖ SISTEMA LISTO PARA USAR")
                return True
            elif status == "WARNING":
                print("‚ö†Ô∏è SISTEMA FUNCIONAL CON ADVERTENCIAS")
                return True
            else:
                print("‚ùå SISTEMA CON ERRORES")
                return False
        else:
            print("‚ùå No se pudo ejecutar tests")
            return False
            
    except Exception as e:
        print(f"‚ùå Error ejecutando tests: {e}")
        return False

async def start_lucia():
    """Inicia LucIA con todas las verificaciones"""
    print("=" * 80)
    print("ü§ñ INICIANDO LUCIA v0.6.0 - SISTEMA COMPLETO")
    print("=" * 80)
    print(f"‚è∞ Iniciado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)
    
    try:
        # 1. Instalar dependencias
        print("\n1Ô∏è‚É£ INSTALANDO DEPENDENCIAS...")
        if not install_dependencies():
            print("‚ùå Error instalando dependencias")
            return False
        
        # 2. Importar y crear LucIA
        print("\n2Ô∏è‚É£ CREANDO INSTANCIA DE LUCIA...")
        from main import LucIACore
        
        # Crear instancia con auto-instalaci√≥n y tests deshabilitados
        # (ya los ejecutamos manualmente)
        lucia = LucIACore(auto_install=False, auto_test=False)
        print("‚úÖ Instancia de LucIA creada")
        
        # 3. Ejecutar tests
        print("\n3Ô∏è‚É£ EJECUTANDO TESTS...")
        if not await run_tests():
            print("‚ö†Ô∏è Tests fallaron, pero continuando...")
        
        # 4. Inicializar m√≥dulos
        print("\n4Ô∏è‚É£ INICIALIZANDO M√ìDULOS...")
        await lucia.initialize_modules()
        print(f"‚úÖ {len(lucia.modules)} m√≥dulos inicializados")
        
        # 5. Mostrar estado del sistema
        print("\n5Ô∏è‚É£ ESTADO DEL SISTEMA:")
        print(f"   M√≥dulos activos: {len(lucia.modules)}")
        print(f"   Configuraci√≥n: {lucia.config.get('ai_name', 'N/A')} v{lucia.config.get('version', 'N/A')}")
        
        # 6. Probar funcionalidades b√°sicas
        print("\n6Ô∏è‚É£ PROBANDO FUNCIONALIDADES...")
        
        # Probar procesamiento de entrada
        test_input = "Hola, soy una prueba del sistema LucIA"
        result = await lucia.process_input(test_input)
        print(f"   Procesamiento de entrada: {'‚úÖ OK' if result else '‚ùå Error'}")
        
        # Probar generaci√≥n de prompts de seguridad
        try:
            prompts = await lucia.generate_security_prompts("autenticacion", 1)
            print(f"   Generaci√≥n de prompts: {'‚úÖ OK' if prompts else '‚ùå Error'}")
        except Exception as e:
            print(f"   Generaci√≥n de prompts: ‚ùå Error - {e}")
        
        # 7. Mostrar resumen final
        print("\n" + "=" * 80)
        print("üéâ LUCIA v0.6.0 INICIADO EXITOSAMENTE")
        print("=" * 80)
        print("‚úÖ Dependencias instaladas")
        print("‚úÖ Tests ejecutados")
        print("‚úÖ M√≥dulos inicializados")
        print("‚úÖ Sistema funcionando")
        print("=" * 80)
        print("üöÄ LucIA est√° listo para ser entrenado por otras IAs")
        print("üîí Enfocado en seguridad en internet y c√≥mo combatirla v√≠a c√≥digo")
        print("=" * 80)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR CR√çTICO: {e}")
        import traceback
        traceback.print_exc()
        return False

async def main():
    """Funci√≥n principal"""
    try:
        success = await start_lucia()
        
        if success:
            print("\nüéØ ¬øQuieres iniciar el motor principal? (s/n): ", end="")
            try:
                response = input().lower().strip()
                if response in ['s', 'si', 's√≠', 'y', 'yes']:
                    print("\nüöÄ Iniciando motor principal...")
                    from main import LucIACore
                    lucia = LucIACore(auto_install=False, auto_test=False)
                    await lucia.start_ai_engine()
                else:
                    print("üëã LucIA configurado pero no iniciado")
            except KeyboardInterrupt:
                print("\nüëã Operaci√≥n cancelada por el usuario")
        else:
            print("\n‚ùå No se pudo iniciar LucIA correctamente")
            return 1
            
    except KeyboardInterrupt:
        print("\nüëã Operaci√≥n interrumpida por el usuario")
        return 0
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    try:
        exit_code = asyncio.run(main())
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\nüëã Sistema detenido por el usuario")
        sys.exit(0)
    except Exception as e:
        print(f"\n‚ùå Error fatal: {e}")
        sys.exit(1)
