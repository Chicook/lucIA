#!/usr/bin/env python3
"""
Demostraci√≥n de Integraci√≥n TensorFlow + @celebro - LucIA
Versi√≥n: 0.6.0
Demuestra las capacidades de aprendizaje profundo integradas con @celebro
"""

import asyncio
import sys
import os
from datetime import datetime

# Agregar el directorio actual al path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def demo_tensorflow_celebro():
    """Demuestra la integraci√≥n de TensorFlow con @celebro"""
    print("=" * 80)
    print("üß† DEMO: INTEGRACI√ìN TENSORFLOW + @CELEBRO")
    print("=" * 80)
    
    try:
        from celebro.celebro_core import CelebroCore
        from celebro.tensorflow_integration import ModelType, TrainingStatus
        
        # Inicializar @celebro con TensorFlow
        print("üöÄ Inicializando @celebro con TensorFlow...")
        celebro = CelebroCore()
        
        # Verificar estado del sistema
        status = celebro.get_system_status()
        print(f"‚úÖ @celebro inicializado: {status['components_status']['tensorflow_integration']}")
        print(f"üìä Modelos TensorFlow disponibles: {status['tensorflow_models']}")
        
        # Crear modelos de diferentes tipos
        print("\nüîß Creando modelos de TensorFlow...")
        
        # 1. Modelo de an√°lisis de sentimientos
        sentiment_model_id = celebro.create_tensorflow_model(
            "Analizador_Sentimientos", 
            "sentiment_analysis"
        )
        print(f"   ‚úÖ Modelo de sentimientos creado: {sentiment_model_id}")
        
        # 2. Modelo de an√°lisis de seguridad
        security_model_id = celebro.create_tensorflow_model(
            "Analizador_Seguridad",
            "security_analysis",
            security_categories=[
                'authentication', 'encryption', 'malware', 'phishing',
                'firewall', 'vulnerability', 'compliance', 'incident_response'
            ]
        )
        print(f"   ‚úÖ Modelo de seguridad creado: {security_model_id}")
        
        # 3. Modelo de clasificaci√≥n de texto
        classification_model_id = celebro.create_tensorflow_model(
            "Clasificador_Texto",
            "text_classification",
            num_classes=5
        )
        print(f"   ‚úÖ Modelo de clasificaci√≥n creado: {classification_model_id}")
        
        # Preparar datos de entrenamiento de ejemplo
        print("\nüìö Preparando datos de entrenamiento...")
        
        # Datos de sentimientos
        sentiment_texts = [
            "Me encanta este sistema de seguridad",
            "Este c√≥digo tiene vulnerabilidades graves",
            "La implementaci√≥n es correcta pero b√°sica",
            "Excelente trabajo en la encriptaci√≥n",
            "Necesitamos mejorar la autenticaci√≥n",
            "El firewall est√° bien configurado",
            "Hay un problema de seguridad cr√≠tico",
            "La documentaci√≥n es muy clara",
            "Este ataque es muy sofisticado",
            "La respuesta fue r√°pida y efectiva"
        ]
        
        sentiment_labels = [
            "Positivo", "Negativo", "Neutral", "Positivo", "Neutral",
            "Positivo", "Negativo", "Positivo", "Negativo", "Positivo"
        ]
        
        # Datos de seguridad
        security_texts = [
            "Implementar autenticaci√≥n de dos factores",
            "Usar encriptaci√≥n AES-256 para datos sensibles",
            "Detectar malware con an√°lisis de comportamiento",
            "Prevenir ataques de phishing con filtros",
            "Configurar firewall con reglas estrictas",
            "Escanear vulnerabilidades regularmente",
            "Cumplir con normativas GDPR",
            "Responder a incidentes de seguridad"
        ]
        
        security_labels = [
            "authentication", "encryption", "malware", "phishing",
            "firewall", "vulnerability", "compliance", "incident_response"
        ]
        
        # Entrenar modelos
        print("\nüéì Entrenando modelos...")
        
        # Entrenar modelo de sentimientos
        print("   üìä Entrenando modelo de sentimientos...")
        sentiment_metrics = celebro.train_tensorflow_model(
            sentiment_model_id,
            sentiment_texts,
            sentiment_labels
        )
        
        if 'error' not in sentiment_metrics:
            print(f"      ‚úÖ Precisi√≥n: {sentiment_metrics['accuracy']:.3f}")
            print(f"      ‚úÖ F1-Score: {sentiment_metrics['f1_score']:.3f}")
            print(f"      ‚è±Ô∏è Tiempo: {sentiment_metrics['training_time']:.2f}s")
        else:
            print(f"      ‚ùå Error: {sentiment_metrics['error']}")
        
        # Entrenar modelo de seguridad
        print("   üîí Entrenando modelo de seguridad...")
        security_metrics = celebro.train_tensorflow_model(
            security_model_id,
            security_texts,
            security_labels
        )
        
        if 'error' not in security_metrics:
            print(f"      ‚úÖ Precisi√≥n: {security_metrics['accuracy']:.3f}")
            print(f"      ‚úÖ F1-Score: {security_metrics['f1_score']:.3f}")
            print(f"      ‚è±Ô∏è Tiempo: {security_metrics['training_time']:.2f}s")
        else:
            print(f"      ‚ùå Error: {security_metrics['error']}")
        
        # Probar predicciones
        print("\nüîÆ Probando predicciones...")
        
        test_texts = [
            "Este sistema de autenticaci√≥n es excelente",
            "Hay una vulnerabilidad cr√≠tica en el c√≥digo",
            "Implementar encriptaci√≥n end-to-end",
            "El malware se propag√≥ r√°pidamente"
        ]
        
        for text in test_texts:
            print(f"\n   üìù Texto: '{text}'")
            
            # An√°lisis de sentimientos
            try:
                sentiment_result = celebro.predict_with_tensorflow(sentiment_model_id, text)
                if 'error' not in sentiment_result:
                    print(f"      üòä Sentimiento: {sentiment_result['sentiment']} ({sentiment_result['confidence']:.3f})")
            except Exception as e:
                print(f"      ‚ùå Error sentimientos: {e}")
            
            # An√°lisis de seguridad
            try:
                security_result = celebro.predict_with_tensorflow(security_model_id, text)
                if 'error' not in security_result:
                    print(f"      üîí Categor√≠a: {security_result['security_category']} ({security_result['confidence']:.3f})")
            except Exception as e:
                print(f"      ‚ùå Error seguridad: {e}")
        
        # An√°lisis combinado con @celebro
        print("\nü§ñ An√°lisis combinado con @celebro...")
        
        sample_response = "Implementar autenticaci√≥n multifactor y encriptaci√≥n AES-256 para proteger los datos sensibles del usuario."
        
        combined_analysis = celebro.analyze_response_with_ai(sample_response, {
            'context': 'security_recommendation',
            'user_level': 'intermediate'
        })
        
        if 'error' not in combined_analysis:
            print(f"   üìä An√°lisis tradicional: {len(combined_analysis['traditional_analysis'])} componentes")
            print(f"   üß† An√°lisis IA: {combined_analysis['models_used']} modelos utilizados")
            print(f"   ‚è∞ Timestamp: {combined_analysis['analysis_timestamp']}")
        else:
            print(f"   ‚ùå Error en an√°lisis combinado: {combined_analysis['error']}")
        
        # Mostrar informaci√≥n de modelos
        print("\nüìã Informaci√≥n de modelos creados...")
        models_info = celebro.get_tensorflow_models()
        
        for model_info in models_info:
            print(f"   üîß {model_info['model_name']} ({model_info['model_id']})")
            print(f"      Tipo: {model_info['model_type']}")
            print(f"      Par√°metros: {model_info['total_params']:,}")
            print(f"      Creado: {model_info['created_at']}")
        
        # Estado final del sistema
        print("\nüìä Estado final del sistema...")
        final_status = celebro.get_system_status()
        print(f"   üß† Modelos TensorFlow: {final_status['tensorflow_models']}")
        print(f"   üìä Estado entrenamiento: {final_status['tensorflow_status']}")
        print(f"   üîß Componentes activos: {sum(final_status['components_status'].values())}/{len(final_status['components_status'])}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en demo de TensorFlow + @celebro: {e}")
        import traceback
        traceback.print_exc()
        return False

async def demo_advanced_features():
    """Demuestra caracter√≠sticas avanzadas de la integraci√≥n"""
    print("\n" + "=" * 80)
    print("üöÄ DEMO: CARACTER√çSTICAS AVANZADAS")
    print("=" * 80)
    
    try:
        from celebro.celebro_core import CelebroCore
        
        celebro = CelebroCore()
        
        # Crear un modelo de generaci√≥n de respuestas
        print("ü§ñ Creando modelo de generaci√≥n de respuestas...")
        generation_model_id = celebro.create_tensorflow_model(
            "Generador_Respuestas",
            "response_generation"
        )
        print(f"   ‚úÖ Modelo creado: {generation_model_id}")
        
        # Simular entrenamiento con datos de respuestas
        print("üìö Preparando datos de generaci√≥n...")
        response_texts = [
            "Para mejorar la seguridad, implementa autenticaci√≥n de dos factores",
            "Usa encriptaci√≥n AES-256 para proteger datos sensibles",
            "Configura un firewall con reglas estrictas",
            "Realiza auditor√≠as de seguridad regularmente",
            "Mant√©n actualizado el software y parches de seguridad"
        ]
        
        # Para generaci√≥n, las etiquetas son las mismas respuestas
        generation_labels = response_texts.copy()
        
        print("üéì Entrenando modelo de generaci√≥n...")
        generation_metrics = celebro.train_tensorflow_model(
            generation_model_id,
            response_texts,
            generation_labels
        )
        
        if 'error' not in generation_metrics:
            print(f"   ‚úÖ Entrenamiento completado")
            print(f"   üìä Precisi√≥n: {generation_metrics['accuracy']:.3f}")
        else:
            print(f"   ‚ùå Error: {generation_metrics['error']}")
        
        # Probar generaci√≥n de respuestas
        print("\nüí¨ Probando generaci√≥n de respuestas...")
        test_prompts = [
            "¬øC√≥mo mejorar la seguridad?",
            "¬øQu√© hacer con datos sensibles?",
            "¬øC√≥mo configurar protecci√≥n?"
        ]
        
        for prompt in test_prompts:
            print(f"\n   üìù Prompt: '{prompt}'")
            try:
                result = celebro.predict_with_tensorflow(generation_model_id, prompt)
                if 'error' not in result:
                    print(f"      ü§ñ Respuesta generada: {result.get('predicted_class', 'N/A')}")
                else:
                    print(f"      ‚ùå Error: {result['error']}")
            except Exception as e:
                print(f"      ‚ùå Error: {e}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error en demo avanzado: {e}")
        return False

async def main():
    """Funci√≥n principal de demostraci√≥n"""
    print("üöÄ DEMOSTRACI√ìN TENSORFLOW + @CELEBRO - LucIA")
    print("=" * 80)
    print(f"‚è∞ Iniciado: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("=" * 80)
    
    demos = [
        ("Integraci√≥n TensorFlow + @celebro", demo_tensorflow_celebro),
        ("Caracter√≠sticas Avanzadas", demo_advanced_features)
    ]
    
    results = []
    
    for demo_name, demo_func in demos:
        print(f"\nüéØ Ejecutando: {demo_name}")
        try:
            success = await demo_func()
            results.append((demo_name, success))
            if success:
                print(f"‚úÖ {demo_name} - EXITOSO")
            else:
                print(f"‚ùå {demo_name} - FALL√ì")
        except Exception as e:
            print(f"‚ùå {demo_name} - ERROR: {e}")
            results.append((demo_name, False))
    
    # Resumen final
    print("\n" + "=" * 80)
    print("üìä RESUMEN DE DEMOSTRACIONES")
    print("=" * 80)
    
    successful = sum(1 for _, success in results if success)
    total = len(results)
    
    for demo_name, success in results:
        status = "‚úÖ EXITOSO" if success else "‚ùå FALL√ì"
        print(f"   {demo_name}: {status}")
    
    print(f"\nüéØ Resultado: {successful}/{total} demostraciones exitosas")
    
    if successful == total:
        print("üéâ ¬°TODAS LAS DEMOSTRACIONES EXITOSAS!")
        print("üß† TensorFlow est√° completamente integrado con @celebro")
        print("üöÄ LucIA ahora tiene capacidades de aprendizaje profundo avanzadas")
    else:
        print("‚ö†Ô∏è Algunas demostraciones fallaron. Revisar errores arriba.")
    
    print("=" * 80)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Demostraci√≥n interrumpida por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error cr√≠tico: {e}")
        sys.exit(1)
